<template>
    <div class="page" data-name="navigationDesktopPage">
        <div class="page-content">
            <div id="mapDesktopNavigation" class="h-100 w-100"></div>
            <div id="navigation-overview">
                <div id="nav-overview">
                    <div class="row h-100">
                        <div class="col-1 h-100 mr-4">                 
                            <div id="qr-navigation" class="desktop-navigation-overview-content"> </div>
                        </div>
                        <div class="col-10">
                            <div class="desktop-navigation-overview-content">                              
                                <div class="row h-100">
                                    <div id="navigation-content" class="col-9">
                                        <div class="row h-100">
                                            <div class="col-1 icon-center">    
                                                <i id="current-direction-arrow-desktop" class="fa-solid fa-arrow-up"></i>                              
                                            </div>
                                            <div class="col-11 ml-2">
                                                <div class="row h-100">
                                                    <div class="col-12"> 
                                                        <h3 id="destination-name-desktop" class="h-100">Loading Please Wait...</h3> 
                                                    </div>
                                                </div>
                                                <div class="row h-100">
                                                    <div class="col-12"> 
                                                        <small id="navigation-info-desktop" class="h-100"></small> 
                                                    </div>
                                                </div>
                                            </div> 
                                        </div>  
                                    </div>
                                    <div class="col-3 ml-2">
                                        <!--Weather-->
                                        <div id="weather" class="desktop-navigation-overview-content bg-secondary p-0 h-100 text-on-primary"> 
                                            <i id="weather-icon" class="fa-solid fa-cloud-sun"></i> 
                                            <span id="weather-text">23Â°</span>
                                            <span id="weather-text-2">Sunny</span>
                                        </div>
                                    </div>
                                </div>                                           
                            </div>                         
                        </div>
                        <div class="col-1 h-100 ml-4">
                            <div class="desktop-navigation-overview-content">
                                <a class="w-100 h-100 tab-link tab-link-active" href="#view-route-desktop">
                                    <i id="current-direction-arrow" class="fa-solid fa-arrow-left text-primary"></i>
                                </a>
                            </div>    
                        </div>
                    </div>   
                </div>    
            </div>
            <div id="nav-directions-overview-desktop">
                <div class="content">
                    <div id="nav-directions-overview-map-desktop"></div>
                    <div id="nav-directions-overview-content-desktop">
                        <div  class="list" id="nav-directions-overview-content-list-desktop"></div>                     
                    </div>
                </div>
            </div>
        </div>
    </div>
</template>
<script>    
import { waitForElement, isWithinBounds, updateRouteData, getInstructionIcon } from "../js/utils/dom.js";
import * as turf from '@turf/turf';
import { checkForURLParams } from "../js/utils/routes.js";
import { createLiveRouteMap } from '../js/plugins/maps/routeOverviewMap.js';
import { addTerrainLayer, runDesktopNav } from '../js/plugins/maps/DesktopNav.js';

export default async (props, { $, $on, $f7 }) => {

    const app = window.app;
    let mapContainer;
    let map;
    let liveMap;

    $('#qr-navigation').on('click', function() {
        //! TODO: create QR code here

        app.dialog.create({
            title: 'Continue With AR Navigation?',
            text: 'Scan the QR code to navigate to your destination.',
            cssClass: 'custom-dialog',
            buttons: [
                {
                    text: 'OK',
                    onClick: function() {}
                }
            ]
        }).open();
    });

    $on('page:tabshow', async () => {  

        await checkForURLParams(app, $f7.views.main.router); // Pass the correct router instance

        // Add checks for necessary navigation data before initializing LocAR
        if (!app.NAVIGATION_ROUTE || !app.NAVIGATION_ROUTE_STEPS || !app.NAVIGATION_ROUTE_DATA) {
            console.error("Navigation data missing. Cannot start navigation.");
            app.dialog.alert("Navigation data is missing. Please try again.", "Error", () => {
                $f7.views.main.router.navigate('/route/'); // Navigate to the route page
            });
            return;
        }

        mapboxgl.accessToken = app.MAPBOX_ACCESS_TOKEN;

        const targetRoute = app.NAVIGATION_ROUTE
        const cameraRoute = app.NAVIGATION_ROUTE

        app.NAVIGATION_ROUTE_STEPS.splice(0, 1);

        mapContainer = await waitForElement('mapDesktopNavigation')
        
        if (!map) {
            map = new mapboxgl.Map({
                container: mapContainer, //! TODO: change to du=ocument and rename id
                zoom: 11.53,
                center: app.NAVIGATION_ROUTE[0],
                pitch: 65,
                bearing: -180,
                // Choose from Mapbox's core styles, or make your own style with Mapbox Studio
                style: app.MAP_3D_STYLE, // style URL
                interactive: false
            });
            map.on('style.load', () => {
                addTerrainLayer(map, targetRoute);
            });
        } else {
            map.resize();
            map.setCenter(app.NAVIGATION_ROUTE[0]);
            map.setZoom(11.53);
            map.setPitch(65);
            map.setBearing(-180);

            if (!map.getLayer('line')) {
                addTerrainLayer(map, targetRoute);
            }
        }

        liveMap = await createLiveRouteMap(app, await waitForElement("nav-directions-overview-map-desktop"));

        const firstTwoStepscontainer = $('#nav-directions-overview-content-list-desktop');
        firstTwoStepscontainer.html(''); // Changed from innerHTML = ''
        app.NAVIGATION_ROUTE_STEPS.forEach((step, index) => {
            const stepElement = document.createElement("div");
            stepElement.classList.add("step-item");
            const iconClass = getInstructionIcon(step.instruction.instruction);
            stepElement.innerHTML = `
                <div class="step-item">
                    <div class="h-100 row mb-2">
                        <div class="col-3 d-flex align-items-center justify-content-center">
                            <i class="text-primary f7-icons bold">${iconClass}</i>
                        </div>
                        <div class="col-9">
                            <div class="row h-100">
                                <div class="col-9">
                                    <h3 class="h-100 step-name">${step.distance === 0 ? 'Arrived' : step.name}</h3>
                                </div>
                                <div class="col-3 text-align-left">
                                    <small class="h-100 step-distance">${Math.round(step.distance)}m</small>
                                </div>
                            </div>
                            <div class="row h-100">
                                <div class="col-12">
                                    <small class="h-100 step-instruction mb-2">${step.instruction.instruction}</small>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>`; // Changed from stepElement.html()
            firstTwoStepscontainer.append(stepElement); // Use .append() for Dom7 to append a native DOM element
            if (index < app.NAVIGATION_ROUTE_STEPS.length - 1) {
                const divider = document.createElement("hr");
                divider.className = "purple-divider";
                firstTwoStepscontainer.append(divider); // Use .append() for Dom7
            }
        });

        map.on('renderstart', () => {  
            if (map.getLayer('line')) {  
                updateRouteData(app.DESTINATION_LOCATION, `${Math.round(app.NAVIGATION_ROUTE_DATA.duration/60)} min`, `${Math.round(app.NAVIGATION_ROUTE_DATA.distance)} m`, $('#destination-name-desktop'), $('#navigation-info-desktop'));
            }
        });

        map.on('idle', () => {
            runDesktopNav(app, map, liveMap, targetRoute, cameraRoute, $f7);
        });
    });

    $on('page:tabhide', () => {
        app.NAVIGATION_ROUTE = null;
        app.NAVIGATION_ROUTE_STEPS = null;
        app.NAVIGATION_ROUTE_DATA = null; 
        map.removeLayer('line');
        map.removeSource('trace');
    });

    $on('pageBeforeRemove', () => {
        if (componentMapInstance) {
            componentMapInstance.remove();
            componentMapInstance = null;
        }

    });

    return $render;
}
</script>
