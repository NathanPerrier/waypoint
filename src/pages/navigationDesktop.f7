<template>
    <div class="page" data-name="navigationDesktopPage">
        <div class="page-content">
            <div id="mapDesktopNavigation" class="h-100 w-100"></div>
            <div id="navigation-overview">
                <div id="nav-overview">
                    <div class="row h-100">
                        <div class="col-1 h-100 mr-4">
                            <a href="#view-route-desktop">                    
                                <div id="qr-navigation" class="desktop-navigation-overview-content"> </div>
                            </a>
                        </div>
                        <div class="col-10">
                            <div class="desktop-navigation-overview-content">                              
                                <div class="row h-100">
                                    <div id="navigation-content" class="col-9">
                                        <div class="row h-100">
                                            <div class="col-1">    
                                                <i id="current-direction-arrow" class="fa-solid fa-arrow-up"></i>                              
                                            </div>
                                            <div class="col-11 ml-2">
                                                <div class="row h-100">
                                                    <div class="col-12"> 
                                                        <h3 id="destination-name" class="h-100">Modwest (11A)</h3> 
                                                    </div>
                                                </div>
                                                <div class="row h-100">
                                                    <div class="col-12"> 
                                                        <small id="navigation-info" class="h-100">12 min - 340 m</small> 
                                                    </div>
                                                </div>
                                            </div> 
                                        </div>  
                                    </div>
                                    <div class="col-3 ml-2">
                                        <!--Weather-->
                                        <div id="weather" class="desktop-navigation-overview-content bg-secondary p-0 h-100 text-on-primary"> 
                                            <i id="weather-icon" class="fa-solid fa-cloud-sun"></i> 
                                            <span id="weather-text">23Â°</span>
                                            <span id="weather-text-2">Sunny</span>
                                        </div>
                                    </div>
                                </div>                                           
                            </div>                         
                        </div>
                        <div class="col-1 h-100 ml-4">
                            <div class="desktop-navigation-overview-content">
                                <a class="w-100 h-100 tab-link tab-link-active" href="#view-route-desktop">
                                    <i id="current-direction-arrow" class="fa-solid fa-arrow-left text-primary"></i>
                                </a>
                            </div>    
                        </div>
                    </div>   
                </div>    
            </div>
        </div>
    </div>
</template>
<script>    
import { waitForElement, isWithinBounds } from "../js/utils/dom.js";
import * as turf from '@turf/turf';
import { checkForURLParams } from "../js/utils/routes.js";
import { createLiveRouteMap } from '../js/plugins/maps/routeOverviewMap.js';

export default async (props, { $, $on, $f7 }) => {

    const app = window.app;

    function bezierCurve(route, t) {
        // smooth route corners using a cubic bezier curve with format [[float, float], [float, float], [float, float], [float, float], ...] with n items and return route
        const n = route.length - 1;
        
        const points = route.map(coord => turf.point(coord));
        const bezierPoints = [];
        for (let i = 0; i < n; i++) {
            const p0 = points[i];
            const p1 = points[i + 1];
            const cp0 = turf.midpoint(p0, p1);
            const cp1 = turf.midpoint(p0, p1);
            bezierPoints.push([p0.geometry.coordinates, cp0.geometry.coordinates, cp1.geometry.coordinates, p1.geometry.coordinates]);
        }
        const bezierRoute = bezierPoints.map((bezier, i) => {
            const [p0, cp0, cp1, p1] = bezier;
            const x = (1 - t) * (1 - t) * p0[0] + 2 * (1 - t) * t * cp0[0] + t * t * p1[0];
            const y = (1 - t) * (1 - t) * p0[1] + 2 * (1 - t) * t * cp0[1] + t * t * p1[1];
            return [x, y];
        });
        return bezierRoute;
    };

    $on('page:tabshow', async () => {  //! BREAKS CODE??
        
        await checkForURLParams(app, $f7.views.main.router); // Pass the correct router instance

        // Add checks for necessary navigation data before initializing LocAR
        if (!app.NAVIGATION_ROUTE || !app.NAVIGATION_ROUTE_STEPS || !app.NAVIGATION_ROUTE_DATA) {
            console.error("Navigation data missing. Cannot start navigation.");
            app.dialog.alert("Navigation data is missing. Please try again.", "Error", () => {
                $f7.views.main.router.navigate('/route/'); // Navigate to the route page
            });
            return;
        }

        mapboxgl.accessToken = app.MAPBOX_ACCESS_TOKEN;

        const mapContainer = await waitForElement('mapDesktopNavigation')
        console.log("Map container found:", mapContainer);

        const map = new mapboxgl.Map({
            container: mapContainer, //! TODO: change to du=ocument and rename id
            zoom: 11.53,
            center: app.NAVIGATION_ROUTE[0],
            pitch: 65,
            bearing: -180,
            // Choose from Mapbox's core styles, or make your own style with Mapbox Studio
            style: app.MAP_3D_STYLE, // style URL
            interactive: false
        })

        // `routes` comes from https://docs.mapbox.com/mapbox-gl-js/assets/routes.js,
        // which has properties that are in the shape of an array of arrays that correspond
        //  to the `coordinates` property of a GeoJSON linestring, for example:

        // const routes = {
        //    target: [
        //        [6.56158447265625, 46.059891147620725],
        //        [6.5691375732421875, 46.05679376154153],
        //    ]
        // };

        // this is the path the camera will look at
        const targetRoute = app.NAVIGATION_ROUTE
        // this is the path the camera will move along
        const cameraRoute = app.NAVIGATION_ROUTE
    
        // add terrain, sky, and line layers once the style has loaded
        map.on('style.load', () => {
            map.addSource('mapbox-dem', {
                'type': 'raster-dem',
                'url': 'mapbox://mapbox.mapbox-terrain-dem-v1',
                'tileSize': 512,
                'maxzoom': 14
            });
            map.setTerrain({ 'source': 'mapbox-dem', 'exaggeration': 1 });  // exaggeration: 1.5
            map.addSource('trace', {
                type: 'geojson',
                data: {
                    'type': 'Feature',
                    'properties': {},
                    'geometry': {
                        'type': 'LineString',
                        'coordinates': targetRoute // smooth the target route issue is that the map joins the points with a straight line
                    }
                }
            });
            map.addLayer({
                type: 'line',
                source: 'trace',
                id: 'line',
                paint: {
                    'line-color': app.PRIMARY_COLOR,
                    'line-width': 25
                },
                layout: {
                    'line-cap': 'round',
                    'line-join': 'round',
                }
            });
        });
    
        // wait for the terrain and sky to load before starting animation
        map.on('load', () => {
            map.resize();
            
            const animationDuration = app.NAVIGATION_ROUTE_DATA.duration*200;   //! TODO: calculate based oof EST travel time dependant on dist and average speed

            const relativeCameraAltitude = 10; 
            
            const routeDistance = turf.length(turf.lineString(targetRoute));
            const cameraRouteDistance = turf.length(
                turf.lineString(cameraRoute)
            );

            // Pre-calculate cumulative distances for segment identification
            const cumulativeDistances = [0];
            for (let i = 0; i < cameraRoute.length - 1; i++) {
                const dist = turf.distance(turf.point(cameraRoute[i]), turf.point(cameraRoute[i+1]));
                cumulativeDistances.push(cumulativeDistances[i] + dist);
            }

            // Define how far ahead the camera should look
            const lookAheadFactor = 0.25; // 0.005?
            const lookAheadDistance = routeDistance * lookAheadFactor;

            let start;

            // Updated the camera animation logic to ensure smooth transitions between nodes.
            function frame(time) {
                if (!start) start = time;
                const phase = (time - start) / animationDuration;

                if (phase >= 1) {
                    //navigation to routeDesktop
                    app.notification.create({
                        icon: '<i class="fa-solid  icon-center fa-location-dot"></i>',
                        title: 'Arrived at destination',
                        text: 'You have reached your destination. ',
                        closeTimeout: 5000,
                    }).open();
                    $f7.views.main.router.navigate('/routeDesktop/'); 
                    app.tab.show('#view-route-desktop'); 
                    return;
                }

                // Calculate current position along the camera path
                const currentDistance = cameraRouteDistance * phase;
                const cameraPosition = turf.along(
                    turf.lineString(cameraRoute),
                    currentDistance
                );
                const cameraPositionCoords = cameraPosition.geometry.coordinates;

                // Calculate the look-at position slightly ahead on the target path
                const lookAtTargetDistance = Math.min(routeDistance, currentDistance + lookAheadDistance); // Ensure look-at doesn't go beyond the route end
                const lookAtPosition = turf.along(
                    turf.lineString(targetRoute),
                    lookAtTargetDistance
                );
                const lookAtCoords = lookAtPosition.geometry.coordinates;

                // Calculate terrain elevation at the camera's current position
                const terrainElevation = map.queryTerrainElevation(cameraPositionCoords) || 0;
                const finalAltitude = Math.max(terrainElevation + relativeCameraAltitude, relativeCameraAltitude); // Ensure a minimum altitude of 100

                // Set camera options
                const camera = map.getFreeCameraOptions();
                camera.position = mapboxgl.MercatorCoordinate.fromLngLat(
                    {
                        lng: cameraPositionCoords[0],
                        lat: cameraPositionCoords[1]
                    },
                    finalAltitude
                );
                
                // Ensure lookAtPoint is valid and ahead of the camera
                if (lookAtCoords && lookAtCoords.length === 2) {
                    camera.lookAtPoint({
                        lng: lookAtCoords[0],
                        lat: lookAtCoords[1],
                    });
                } else {
                    console.warn("Invalid lookAtCoords:", lookAtCoords);
                }

                map.setFreeCameraOptions(camera);

                window.requestAnimationFrame(frame);
            }

            window.requestAnimationFrame(frame);
        });
    });

    $on('page:tabhide', () => {
        app.NAVIGATION_ROUTE = null;
        app.NAVIGATION_ROUTE_STEPS = null;
        app.NAVIGATION_ROUTE_DATA = null; 
    });

    // Add cleanup logic
    $on('pageBeforeOut', () => {    
        const mapContainer = document.getElementById('mapDesktopNavigation'); // Get container reference
        if (map) {
            map.remove();
            map = null;
            if (mapContainer) {
                mapContainer._mapInstance = null; // Clear the stored instance
                mapContainer.innerHTML = ''; // Explicitly clear container content
            }
        } else if (mapContainer) {
             mapContainer.innerHTML = ''; // Clear container even if map instance wasn't found/removed
        }
    });

    return $render;
}
</script>
