<template>
    <div class="page" data-name="route">
        <div class="page-content">

            <a href="#view-home" id="go-back"  class="tab-link tab-link-active">        
                <i class="fa fa-arrow-left fa-2x"></i>        
            </a>
            <div id="locarjs">
                
            </div>
            <div id="route-input">
                <div class="tabs-animated-wrap">
                    <div class="tabs">
                        <div id="tab1" class="tab tab-active">
                            <div id="search-results-list">

                            </div>
                            <div class="nav">
                                <div class="row h-100">
                                    <div class="col-10">
                                        <div class="row h-100">
                                            <div class="col-9 p-0">    
                                                <input id="search-input" autocomplete="street-address" type="text" name="search-input" placeholder="ModWest (Building 11A)" />                                           
                                            </div>
                                            <div class="col-3">
                                                <a id="search-button" href="#" data-tab=".tab2" class="button button-fill h-100 tab-link tab-link-active"><strong>Search</strong></a>
                                            </div> 
                                        </div>  
                                    </div>
                                    <div class="col-2 ml-2">
                                        <button id="settings-button" data-actions=".settings-actions" class="actions-open button button-outline h-100"><i class="fa-solid fa-sliders fa-2x"></i></button>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                
            </div>

            <div class="actions-modal settings-actions bg-white" id="settings-actions">
                <form class="list list-strong-ios list-dividers-ios list-outline-ios form-store-data" id="settings-form">
                    <h1 class="text-align-center mb-2">Settings</h1>
                    <ul>
                        <li>
                            <p class="segmented segmented-raised segmented-round mx-5">
                                <a class="button button-round" data-value="walking">Walking</a>
                                <a class="button button-round" data-value="cycling">Biking</button>
                                <a class="button button-round" data-value="driving">Driving</a>
                            </p>
                        </li>
                        <li>
                            <div class="settings-map-div m-4">
                                <div id="settings-map"></div>
                            </div>
                        </li>
                      
                    </ul>
                    <a data-actions=".settings-actions" class="actions-close button button-fill mx-2 r-2 button-raised">Done</a>
                </form>
            </div>

            <div class="actions-modal confirm-route-actions bg-white" id="confirm-route-actions">
                <form class="list list-strong-ios list-dividers-ios list-outline-ios form-store-data mx-4" id="confirm-route-form">
                    <h1 class="text-align-center mb-2">Confirm Your Route</h1>
                    <ul>
                        <li>
                            <div class="confirm-route-map-div">
                                <div id="confirm-route-map"></div>
                            </div>
                            <div id="route-info-overview">
                                <div class="row">
                                    <h3 class="text-left text-black">Navigate To <span id="destination_name"></span>?</h3>
                                </div>
                                <div class="row">
                                    
                                    <div class="col-3">
                                        <p class="text-center m-0" id="distance">2km</p>
                                    </div>
                                    <div class="col-3 mx-2">
                                        <p class="text-center m-0" id="time">5mins</p>
                                    </div>
                                    <div class="col-3">
                                        <p class="text-center m-0" id="mode"><i class="fa-solid fa-person-walking"></i></p>
                                    </div>
                                </div>
                            </div>
                        </li>
                    </ul>
                    <div class="row h-100">
                        <div class="col-9">
                            <a id="confirm-route-button" class="button button-fill r-2 button-raised">Confirm</a>

                        </div>
                        <div class="col-3 ml-2">
                            <a id="close-button" class="actions-close button button-outline r-2 button-raised"><i class="fa fa-arrow-left"></i></a>
                        </div>
                    </div>
                </form>
            </div>
        </div>
    </div>
   
   
</template>
<script>    
    import { autocompleteSearch } from "../js/plugins/maps/mapboxSearch.js";
    import { runLocarRoute } from "../js/plugins/locar/locarRoute.js";
    import { getRoute } from "../js/plugins/maps/mapboxRoute.js";
    import { createStaticRouteMap } from "../js/plugins/maps/routeOverviewMap.js";
    import { initializeLocAR, destroyLocARInstance } from "../js/plugins/locar/locar.js";
    import { waitForElement } from "../js/utils/dom.js";
    import { displayDialog } from "../js/utils/dialog.js";


    function isWithinBounds(location) {
        const isUserInBbx = app.MAPBOXGL_LOCATION_BOUNDS.contains(location);
        return isUserInBbx;
    }
      
    export default async (props, { $, $on, $f7 }) => {

        const app = window.app;
        let locarInstance = null; // Define outside to be accessible by both handlers
        let locarContainerId = null; // Store the ID

        // Define the handler function for the confirm route button
        const handleConfirmRouteClick = () => {
            $f7.actions.close('.confirm-route-actions');
            console.log('navigating to navigation page');
            $f7.views.navigation.router.navigate('/navigation/')
            app.tab.show('#view-navigation');

        };


        $on('pageInit', async () => {
            const locarConatiner = await waitForElement("locarjs");
            if (!locarConatiner) {
                console.error("LocAR container 'NavLocarjs' not found.");
                displayDialog(app, app.router, "Error", "LocAR container not found. Please try again later.");
                return;
            }
            locarContainerId = locarConatiner.id; // Store the ID
            console.log("locarConatiner", locarConatiner);
            locarInstance = await initializeLocAR(app, locarConatiner); // Assign to the outer scope variable
            if (locarInstance) { // Check if initialization was successful
                runLocarRoute(app, locarInstance);
            }

            var searchInput = document.getElementById('search-input');
            var searchResults = document.getElementById('search-results-list');
            var confirmRouteButton = document.getElementById('confirm-route-button'); // Get button reference

            searchInput.addEventListener('input', async function() {
                autocompleteSearch(searchInput, searchResults, app.START_LOCATION);
            });
            
            var modeButtons = document.querySelectorAll('.segmented .button');
            modeButtons.forEach(function(button) {
                if (button.getAttribute('data-value') === app.TRANSPORTATION_MODE) {
                    button.classList.add('button-active');
                } else {
                    button.classList.remove('button-active');
                }
            });


            // add event listener to each mode button to change the TRANSPORTATION_MODE variable
            modeButtons.forEach(function(button) {
                button.addEventListener('click', function() {
                    modeButtons.forEach(function(btn) {
                        btn.classList.remove('button-active');
                    });
                    button.classList.add('button-active');
                    var mode = button.getAttribute('data-value');
                    app.TRANSPORTATION_MODE = mode;
                    app.TRANSPORTATION_MODE_ICON = mode === 'driving' ? app.DRIVING_ICON : mode === 'cycling' ? app.BIKING_ICON : app.WALKING_ICON;
                    console.log('Config TRANSPORTATION_MODE changed to: ' + app.TRANSPORTATION_MODE);
                });            
            });

            // Remove potential existing listener and add the new one
            confirmRouteButton.removeEventListener('click', handleConfirmRouteClick);
            confirmRouteButton.addEventListener('click', handleConfirmRouteClick);


            var searchButton = document.getElementById('search-button');

            searchButton.addEventListener('click', async function() {
                var searchValue = document.getElementById('search-input').value;
                var navigationMode = app.TRANSPORTATION_MODE;
                
                if (searchValue === '') {
                    $f7.dialog.alert('Please enter a search value');
                    return;
                }             

                if (navigationMode === '' || navigationMode === null) {
                    $f7.dialog.alert('Please select a navigation mode');
                    return;
                }

                if (!app.START_LOCATION || typeof app.START_LOCATION.lng !== 'number' || typeof app.START_LOCATION.lat !== 'number') {
                    $f7.dialog.alert('Valid start location is missing. Please set it in settings.');
                    return;
                }

                if (!isWithinBounds(app.START_LOCATION)) {
                    $f7.dialog.alert('Your current start location is outside the the UQ campus. Please adjust it in settings.');
                    console.warn('Start location out of bounds:', app.START_LOCATION, 'Bounds:', app.MAP_LOCATION_BOUNDS);
                    return;
                }

                if (searchValue === null || searchValue === undefined) {
                    $f7.dialog.alert('No valid destination found for the search term.');
                    return;
                }

                if (!app.DESTINATION_LOCATION_DATA || !app.DESTINATION_LOCATION_COORDINATES) {
                    $f7.dialog.alert('No valid destination found for the search term. Please reenter the search destination.');
                    return;
                }

                if (!isWithinBounds(app.DESTINATION_LOCATION_COORDINATES)) {
                    $f7.dialog.alert('The selected destination is outside the allowed map area.');
                    console.warn('Destination location out of bounds:', app.DESTINATION_LOCATION_COORDINATES, 'Bounds:', app.MAP_LOCATION_BOUNDS);
                    return;
                }
   
                app.DESTINATION_LOCATION_DATA.startLocation = app.START_LOCATION;

                $f7.actions.close('.settings-actions');

                await getRoute(app, $f7.router);

                // Check if route data is valid before proceeding
                if (!app.NAVIGATION_ROUTE_DATA || !app.NAVIGATION_ROUTE_DATA.duration || !app.NAVIGATION_ROUTE_DATA.distance) {
                    console.error("Failed to get valid route data.");
                    $f7.dialog.alert('Could not calculate the route. Please try again later.');
                    return;
                }

                const mapContainerConfirm = document.getElementById('confirm-route-map');
                await createStaticRouteMap(app, mapContainerConfirm);

                document.getElementById('time').innerHTML = (app.NAVIGATION_ROUTE_DATA.duration / 60).toFixed(0) + 'mins';
                document.getElementById('distance').innerHTML = (app.NAVIGATION_ROUTE_DATA.distance/1000).toFixed(1) + 'km';
                document.getElementById('mode').innerHTML = `<i class="${app.TRANSPORTATION_MODE_ICON}"></i>`;
                document.getElementById('destination_name').innerHTML = app.DESTINATION_LOCATION_DATA.name;

                $f7.actions.open('.confirm-route-actions');

            });
        });


        $on('pageBeforeRemove', () => {
            
            if (locarContainerId) { // Use the stored ID
                destroyLocARInstance(app, locarContainerId);
                locarInstance = null; // Clear the instance variable
                locarContainerId = null; // Clear the ID
            }

             const settingsModal = $f7.actions.get('.settings-actions');
             if (settingsModal) {
                 settingsModal.off('actionsOpened');
                 settingsModal.off('actionsClose');
                 settingsModal.off('actionsClosed');
             }
             const mapContainer = document.getElementById('settings-map');
             if (minimapInstance && mapContainer) {
                 mapContainer.innerHTML = ''; 
             }

             // Remove listener when page is removed
             var confirmRouteButton = document.getElementById('confirm-route-button');
             if (confirmRouteButton) {
                 confirmRouteButton.removeEventListener('click', handleConfirmRouteClick);
             }
        });
    
        return $render;
    };
</script>
