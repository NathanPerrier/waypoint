<template>
    <div class="page" data-name="route">
        <div class="page-content">

            <a href="#view-home" id="go-back"  class="tab-link tab-link-active">        
                <i class="fa fa-arrow-left fa-2x"></i>        
            </a>
            <div id="locarjs">
                
            </div>
            <div id="route-input">
                
                <!-- Tabs animated wrapper, required to switch tabs with transition -->
                <div class="tabs-animated-wrap">

                    <!-- Tabs, tabs wrapper -->
                    <div class="tabs">
                        <!-- Tab 1, active by default -->
                        <div id="tab1" class="tab tab-active">
                            <div id="search-results-list">

                            </div>
                            <div class="nav">
                                <div class="row h-100">
                                    <div class="col-10">
                                        <div class="row h-100">
                                            <div class="col-9 p-0">    
                                                <input id="search-input" autocomplete="street-address" type="text" name="search-input" placeholder="ModWest (Building 11A)" />                                           
                                            </div>
                                            <div class="col-3">
                                                <a id="search-button" href="#" data-tab=".tab2" class="button button-fill h-100 tab-link tab-link-active">Search</a>
                                            </div> 
                                        </div>  
                                    </div>
                                    <div class="col-2 ml-2">
                                        <button id="settings-button" data-actions=".settings-actions" class="actions-open button button-outline h-100"><i class="fa-solid fa-sliders fa-2x"></i></button>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                
            </div>

            <div class="actions-modal settings-actions bg-white" id="settings-actions">
                <form class="list list-strong-ios list-dividers-ios list-outline-ios form-store-data" id="settings-form">
                    <h1 class="text-align-center mb-2">Settings</h1>
                    <ul>
                        <!-- add units form input metric/imerial-->
                        <li>
                            <p class="segmented segmented-raised segmented-round mx-5">
                                <a class="button button-round" data-value="walking">Walking</a>
                                <a class="button button-round" data-value="biking">Biking</button>
                                <a class="button button-round" data-value="driving">Driving</a>
                            </p>
                        </li>
                        <li>
                            <div id="settings-map"></div>
                        </li>
                      
                    </ul>
                    <a data-actions=".settings-actions" class="actions-close button button-fill m-5 r-2">Done</a>
                </form>
            </div>
        </div>
    </div>
   
   
</template>
<script>    
    import { autocompleteSearch } from "../js/plugins/maps/mapboxSearch.js";
    import { runLocarRoute } from "../js/plugins/locar/locarRoute.js";


    function isWithinBounds(location) {
        const isUserInBbx = app.MAPBOXGL_LOCATION_BOUNDS.contains(location);
        return isUserInBbx;
    }
      
    export default async (props, { $, $on, $f7 }) => {

        const app = window.app;


        $on('pageInit', async () => {

            runLocarRoute(app)

            var searchInput = document.getElementById('search-input');
            var searchResults = document.getElementById('search-results-list');

            searchInput.addEventListener('input', async function() {
                autocompleteSearch(searchInput, searchResults, app.START_LOCATION);
            });
            
            var modeButtons = document.querySelectorAll('.segmented .button');
            modeButtons.forEach(function(button) {
                if (button.getAttribute('data-value') === app.TRANSPORTATION_MODE) {
                    button.classList.add('button-active');
                } else {
                    button.classList.remove('button-active');
                }
            });


            // add event listener to each mode button to change the TRANSPORTATION_MODE variable
            modeButtons.forEach(function(button) {
                button.addEventListener('click', function() {
                    modeButtons.forEach(function(btn) {
                        btn.classList.remove('button-active');
                    });
                    button.classList.add('button-active');
                    var mode = button.getAttribute('data-value');
                    app.TRANSPORTATION_MODE = mode;
                    console.warn('Config TRANSPORTATION_MODE changed to: ' + app.TRANSPORTATION_MODE);
                });            
            });

            var searchButton = document.getElementById('search-button');

            searchButton.addEventListener('click', async function() {
                var searchValue = document.getElementById('search-input').value;
                var navigationMode = app.TRANSPORTATION_MODE;
                
                if (searchValue === '') {
                    $f7.dialog.alert('Please enter a search value');
                    return;
                }             

                if (navigationMode === '' || navigationMode === null) {
                    $f7.dialog.alert('Please select a navigation mode');
                    return;
                }

                if (!app.START_LOCATION || typeof app.START_LOCATION.lng !== 'number' || typeof app.START_LOCATION.lat !== 'number') {
                    $f7.dialog.alert('Valid start location is missing. Please set it in settings.');
                    return;
                }

                // --- Check start location bounds immediately ---
                 if (!isWithinBounds(app.START_LOCATION)) {
                    $f7.dialog.alert('Your current start location is outside the the UQ campus. Please adjust it in settings.');
                    console.warn('Start location out of bounds:', app.START_LOCATION, 'Bounds:', app.MAP_LOCATION_BOUNDS);
                    return;
                 }

                if (searchValue === null || searchValue === undefined) {
                    $f7.dialog.alert('No valid destination found for the search term.');
                    return;
                }

                if (!isWithinBounds(app.DESTINATION_LOCATION_COORDINATES)) {
                    $f7.dialog.alert('The selected destination is outside the allowed map area.');
                    console.warn('Destination location out of bounds:', app.DESTINATION_LOCATION_COORDINATES, 'Bounds:', app.MAP_LOCATION_BOUNDS);
                    return;
                }
   
                app.DESTINATION_LOCATION_DATA.startLocation = app.START_LOCATION;

                $f7.dialog.confirm(`Navigate to ${app.DESTINATION_LOCATION}?`, 'Waypoint', () => {
                    $f7.dialog.alert('Navigating to ' + app.DESTINATION_LOCATION + '...');
                    // Add actual navigation logic here, potentially using searchResultData
                    console.log("Navigation confirmed:", app.DESTINATION_LOCATION_DATA);
                    // Example: $f7.views.main.router.navigate('/navigation-page/', { props: { routeData: searchResultData } });
                });

            });
        });

        $on('pageBeforeRemove', () => {
            // Clean up map instance and listeners if the page is removed
             const settingsModal = $f7.actions.get('.settings-actions');
             if (settingsModal) {
                 settingsModal.off('actionsOpened');
                 settingsModal.off('actionsClose');
                 settingsModal.off('actionsClosed');
             }
             const mapContainer = document.getElementById('settings-map');
             if (minimapInstance && mapContainer) {
                 mapContainer.innerHTML = ''; 
             }
        });
    
        return $render;
    };
</script>
