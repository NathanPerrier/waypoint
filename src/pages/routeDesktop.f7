<template>
    <div class="page" data-name="routeDesktopPage">
        <div class="page-content">

            <a href="#view-home" id="go-back"  class="tab-link tab-link-active">        
                <i class="fa fa-arrow-left fa-2x"></i>        
            </a>
            <div id="mapDesktopRoute" class="h-100 w-100"></div>
            <div id="route-input">
                <div class="tabs-animated-wrap">
                    <div class="tabs">
                        <div id="tab1" class="tab tab-active">
                            <div id="search-results-list-route">

                            </div>
                            <div class="nav">
                                <div class="row h-100">
                                    <div class="col-10">
                                        <div class="row h-100">
                                            <div class="col-9 p-0">    
                                                <input id="search-input-route" autocomplete="street-address" type="text" name="search-input" placeholder="ModWest (Building 11A)" />                                           
                                            </div>
                                            <div class="col-3">
                                                <a id="search-button-route" href="#" data-tab=".tab2" class="button button-fill h-100 tab-link tab-link-active"><strong>Search</strong></a>
                                            </div> 
                                        </div>  
                                    </div>
                                    <div class="col-2 ml-2">
                                        <button id="settings-button" data-actions=".settings-actions" class="actions-open button button-outline h-100"><i class="fa-solid fa-sliders fa-2x"></i></button>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                
            </div>

            <div class="actions-modal settings-actions bg-white" id="settings-actions">
                <form class="list list-strong-ios list-dividers-ios list-outline-ios form-store-data" id="settings-form">
                    <h1 class="text-align-center mb-2">Settings</h1>
                    <ul>
                        <li>
                            <p class="segmented segmented-raised segmented-round mx-5">
                                <a class="button button-round" data-value="walking">Walking</a>
                                <a class="button button-round" data-value="cycling">Biking</button>
                                <a class="button button-round" data-value="driving">Driving</a>
                            </p>
                        </li>
                        <li>
                            <div class="settings-map-div m-4">
                                <div id="settings-map"></div>
                            </div>
                        </li>
                      
                    </ul>
                    <div class="d-flex justify-content-center h-100  mx-4 align-items-center">
                        <a id="settings-submit" data-actions=".settings-actions" class="actions-close button button-fill h-100 w-100 r-2 button-raised">Done</a>
                    </div>
                </form>
            </div>

            <div class="actions-modal confirm-route-actions bg-white" id="confirm-route-actions">
                <form class="list list-strong-ios list-dividers-ios list-outline-ios form-store-data mx-4" id="confirm-route-form">
                    <h1 class="text-align-center mb-2">Confirm Your Route</h1>
                    <ul>
                        <li>
                            <div class="confirm-route-map-div">
                                <div id="confirm-route-map-desktop"></div>
                            </div>
                            <div id="route-info-overview">
                                <div class="row">
                                    <h3 class="text-left text-black">Navigate To <span id="destination_name_desktop"></span>?</h3>
                                </div>
                                <div class="row d-flex justify-between w-100">
                                    
                                    <div class="col-3">
                                        <p class="text-center m-0" id="distance-desktop">2km</p>
                                    </div>
                                    <div class="col-3 mx-2">
                                        <p class="text-center m-0" id="time-desktop">5mins</p>
                                    </div>
                                    <div class="col-3">
                                        <p class="text-center m-0" id="mode-desktop"><i class="fa-solid fa-person-walking"></i></p>
                                    </div>
                                </div>
                            </div>
                        </li>
                    </ul>
                    <div class="row h-100">
                        <div class="col-9">
                            <a id="confirm-route-button-route" class="button button-fill r-2 button-raised">Confirm</a>

                        </div>
                        <div class="col-3 ml-2">
                            <a id="close-button" class="actions-close button button-outline r-2 button-raised"><i class="fa fa-arrow-left"></i></a>
                        </div>
                    </div>
                </form>
            </div>
        </div>
    </div>

</template>
<script>    
import { autocompleteSearch } from "../js/plugins/maps/mapboxSearch.js";
import { waitForElement, handleSearchClick, handleRedirect, isWithinBounds } from "../js/utils/dom.js";
import { initSettingsMap } from "../js/plugins/maps/settingsSearchMap.js";

export default async (props, { $, $on, $f7 }) => {

    const app = window.app;

    const boundConfirmRouteHandler = () => handleRedirect('#view-navigation-desktop', '/navigationDesktop/', $f7);
    const boundSearchClickHandler = () => handleSearchClick(app, $f7, document.getElementById('search-input-route').value, 'confirm-route-map-desktop', 'time-desktop', 'distance-desktop', 'mode-desktop', 'destination_name_desktop');
   
    $on('page:tabshow', async () => {

        mapboxgl.accessToken = app.MAPBOX_ACCESS_TOKEN;

        const mapContainer = await waitForElement('mapDesktopRoute')
        const settingsMapContainer = await waitForElement('settings-map')

        if (!isWithinBounds(app, {
            lat: app.USER_LOCATION[1],
            lng: app.USER_LOCATION[0],
        })) {
            app.USER_LOCATION = app.MAP_LOCATION_CENTER;
            app.START_LOCATION = {
                lat: app.MAP_LOCATION_CENTER[1],
                lng: app.MAP_LOCATION_CENTER[0],
            };
        } 
        console.log("Map container found:", mapContainer); // Debugging line
        console.log("user location:", app.USER_LOCATION); // Debugging line
        const map = new mapboxgl.Map({
            container: mapContainer, 
            zoom: 20,
            minZoom: 19,
            maxZoom: 23,
            center: app.USER_LOCATION,
            pitch: 65,
            style: app.MAP_3D_STYLE, 
            maxBounds: app.MAP_LOCATION_BOUNDS_LNGLATLIKE,
        });

        const settingsMap = await initSettingsMap(settingsMapContainer);

        map.resize();
        settingsMap.resize();

    });

    $on('pageInit', async () => {
        var searchInput = document.getElementById('search-input-route');
        var searchResults = document.getElementById('search-results-list-route');

        searchInput.addEventListener('input', async function() {
            autocompleteSearch(searchInput, searchResults, app.START_LOCATION);
        });

        var modeButtons = document.querySelectorAll('.segmented .button');
        modeButtons.forEach(function(button) {
            if (button.getAttribute('data-value') === app.TRANSPORTATION_MODE) {
                button.classList.add('button-active');
            } else {
                button.classList.remove('button-active');
            }
        });

        modeButtons.forEach(function(button) {
            button.addEventListener('click', function() {
                modeButtons.forEach(function(btn) {
                    btn.classList.remove('button-active');
                });
                button.classList.add('button-active');
                var mode = button.getAttribute('data-value');
                app.TRANSPORTATION_MODE = mode;
                app.TRANSPORTATION_MODE_ICON = mode === 'driving' ? app.DRIVING_ICON : mode === 'cycling' ? app.BIKING_ICON : app.WALKING_ICON;
                console.log('Config TRANSPORTATION_MODE changed to: ' + app.TRANSPORTATION_MODE);
            });            
        });

        var searchButton = document.getElementById('search-button-route');
        var confirmRouteButton = document.getElementById('confirm-route-button-route');



        // --- Add listeners using the bound references ---
        if (confirmRouteButton) {
            // Remove listener first to prevent duplicates if pageInit runs again unexpectedly
            confirmRouteButton.removeEventListener('click', boundConfirmRouteHandler);
            confirmRouteButton.addEventListener('click', boundConfirmRouteHandler);
        }
        if (searchButton) {
            // Remove listener first
            searchButton.removeEventListener('click', boundSearchClickHandler);
            searchButton.addEventListener('click', boundSearchClickHandler);
        }
    });

    // Add cleanup logic
    $on('pageBeforeOut', () => {
        console.log("Cleaning up routeDesktop.f7 page...");
        const mapContainer = document.getElementById('mapDesktopRoute'); // Get container reference
        if (map) {
            map.remove();
            map = null;
            if (mapContainer) {
                mapContainer._mapInstance = null; // Clear the stored instance
                mapContainer.innerHTML = ''; // Explicitly clear container content
            }
            console.log("Desktop route map removed and container cleared.");
        } else if (mapContainer) {
             mapContainer.innerHTML = ''; // Clear container even if map instance wasn't found/removed
             console.log("Desktop route container cleared (map instance not found).");
        }
         console.log("routeDesktop.f7 cleanup complete.");
    });

    return $render;
}
</script>
